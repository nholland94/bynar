                   OpCapability Shader
                   OpMemoryModel Logical Simple
                   OpEntryPoint GLCompute %func "f" %v_in_buf_p %v_out_buf_p %v_g_inv_p
                   OpExecutionMode %func LocalSize 1 1 1

                   ; -- DECORATIONS

                   OpDecorate %t_buf BufferBlock
                   OpMemberDecorate %t_buf 0 Offset 0

                   OpDecorate %t_push_const Block
                   OpMemberDecorate %t_push_const 0 Offset 0
                   OpMemberDecorate %t_push_const 1 Offset 4
                   OpMemberDecorate %t_push_const 2 Offset 8
                   OpDecorate %v_push_const_p DescriptorSet 0

                   OpDecorate %v_g_inv_p BuiltIn GlobalInvocationId
                   OpDecorate %v_w_size_p BuiltIn NumWorkgroups

                   OpDecorate %v_in_buf_p DescriptorSet 0
                   OpDecorate %v_in_buf_p Binding 0

                   OpDecorate %v_out_buf_p DescriptorSet 0
                   OpDecorate %v_out_buf_p Binding 1

                   ; -- TYPES

%t_void          = OpTypeVoid
%t_bool          = OpTypeBool
%t_func          = OpTypeFunction %t_void
%t_int           = OpTypeInt 32 1
%t_int_rarr      = OpTypeRuntimeArray %t_int
%t_vec3          = OpTypeVector %t_int 3
%t_buf           = OpTypeStruct %t_int_rarr
%t_push_const    = OpTypeStruct %t_int %t_int %t_int

%t_p_pc_pc       = OpTypePointer PushConstant %t_push_const
%t_p_pc_int      = OpTypePointer PushConstant %t_int
%t_p_in_int      = OpTypePointer Input %t_int
%t_p_in_vec3     = OpTypePointer Input %t_vec3
%t_p_un_int      = OpTypePointer Uniform %t_int
%t_p_un_buf      = OpTypePointer Uniform %t_buf
%t_p_fn_int      = OpTypePointer Function %t_int

                   ; -- CONSTANTS

%c_zero          = OpConstant %t_int 0
%c_one           = OpConstant %t_int 1
%c_two           = OpConstant %t_int 2

                   ; -- VARIABLES

%v_in_buf_p      = OpVariable %t_p_un_buf Uniform
%v_out_buf_p     = OpVariable %t_p_un_buf Uniform
%v_g_inv_p       = OpVariable %t_p_in_vec3 Input
%v_w_size_p      = OpVariable %t_p_in_vec3 Input
%v_push_const_p  = OpVariable %t_p_pc_pc PushConstant

                   ; -- BODY

%func            = OpFunction %t_void None %t_func

%l_func          = OpLabel
                   ; TODO refactor function variables to OpPhi passes
%i_p             = OpVariable %t_p_fn_int Function
%acc_p           = OpVariable %t_p_fn_int Function
%len_p           = OpVariable %t_p_fn_int Function
%g_inv_p         = OpAccessChain %t_p_in_int %v_g_inv_p %c_zero
%g_inv           = OpLoad %t_int %g_inv_p
%w_size_p        = OpAccessChain %t_p_in_int %v_w_size_p %c_zero
%w_size          = OpLoad %t_int %w_size_p
%inv_count_p     = OpAccessChain %t_p_pc_int %v_push_const_p %c_zero
%inv_count       = OpLoad %t_int %inv_count_p
%last_w_index    = OpISub %t_int %w_size %c_one
%case            = OpSLessThan %t_bool %g_inv %last_w_index
                   OpBranchConditional %case %l_case_full %l_case_partial

                   ; if %g_inv < (%w_size - 1) then
%l_case_full     = OpLabel
%pc_0_p          = OpAccessChain %t_p_pc_int %v_push_const_p %c_one
%len_0           = OpLoad %t_int %pc_0_p
                   OpBranch %l_setup

                   ; else
%l_case_partial  = OpLabel
%pc_1_p          = OpAccessChain %t_p_pc_int %v_push_const_p %c_two
%len_1           = OpLoad %t_int %pc_1_p
                   OpBranch %l_setup

                   ; prepare loop
%l_setup         = OpLabel
%len_2           = OpPhi %t_int %len_0 %l_case_full %len_1 %l_case_partial
%gap_len_p       = OpAccessChain %t_p_pc_int %v_push_const_p %c_one
%gap_len         = OpLoad %t_int %gap_len_p
%base_index      = OpIMul %t_int %g_inv %gap_len
                   OpStore %i_p %c_zero
                   OpStore %acc_p %c_zero
                   OpBranch %l_loop_top

                   ; loop top
%l_loop_top      = OpLabel
                   OpLoopMerge %l_loop_end %l_loop_continue None
                   OpBranch %l_loop_begin

                   ; while(*%i_p < %len)
%l_loop_begin    = OpLabel
%i_1             = OpLoad %t_int %i_p
%cond            = OpSLessThan %t_bool %i_1 %len_2
                   OpBranchConditional %cond %l_loop_body %l_loop_end

                   ; loop body
%l_loop_body     = OpLabel
%index           = OpIAdd %t_int %base_index %i_1
%val_p           = OpAccessChain %t_p_un_int %v_in_buf_p %c_zero %index
%acc             = OpLoad %t_int %acc_p
%val             = OpLoad %t_int %val_p
%new_acc         = OpIAdd %t_int %acc %val
                   OpStore %acc_p %new_acc
                   OpBranch %l_loop_continue

                   ; i++
%l_loop_continue = OpLabel
%i_2             = OpLoad %t_int %i_p
%i_2_succ        = OpIAdd %t_int %i_2 %c_one
                   OpStore %i_p %i_2_succ
                   OpBranch %l_loop_top

                   ; end of loop
%l_loop_end      = OpLabel
%out_p           = OpAccessChain %t_p_un_int %v_out_buf_p %c_zero %g_inv
%sum             = OpLoad %t_int %acc_p
                   OpStore %out_p %sum
                   OpReturn
                   OpFunctionEnd
